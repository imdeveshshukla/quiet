// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  dp String?
  bio String?
  userID String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  isVarified Boolean @default(false)
  posts Post[]
  upvotes Upvote[]
  comments Comment[]                                                                                                                                                                                                   
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model UserVarify{
  userID String @id @unique
  otp String
  createdAt BigInt
  expiresAt BigInt
}
model Post{
  id String @id @default(uuid())
  title String 
  body String
  img String?
  userId String
  username String
  user User @relation(fields: [userId], references: [userID])
  upvotes Upvote[]
  comments Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Comment{
  id String @id @default(uuid())
  body String
  postId String
  post Post @relation(fields: [postId],references: [id])
  userId String
  dp String?
  username String
  user User @relation(fields: [userId],references: [userID])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
model Upvote{
  id Int @id @default(autoincrement())
  upvoted Boolean @default(false)
  postId String
  post Post @relation(fields: [postId],references: [id])
  userId String 
  user User @relation(fields: [userId],references: [userID])
  createAt DateTime @default(now())
}